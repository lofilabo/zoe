oh look !

	I define burger -of-> zoe_array
		burger define subburger1 = "doggie"
		burger define subburger2 = "kittie"
		burger define subburger3 = "mousey"

	I define cheeze -of-> zoe_array
		cheeze define subcheeze = "KATT"

	I define bukkit -of-> zoe_array
	I define subbukkit -of-> zoe_array
	I define burgerBUR -of-> zoe_array

	bukkit define subbukkit = "BUKKKKIT"
	bukkit define cheeze = "BUKKKKIT"

	bukkit define burgerBUR zoe_derivedFrom burger 
	^.^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Progress!!!!
	^.^ THE MOST IMPORTANT LINE!
	^.^ SHOWS HOW TO DERIVE / GIVE-BIRTH-TO A DAUGHTER-OBJECT
	^.^ KEY HERE IS >>>>>> zoe_derivedFrom <<<<<<<<<
	^.^
	^.^ 1. we define 'bukkit' (above)
	^.^ 2. we say 'within bukkit, define [burgerBUR], a derivative of [burger]
	^.^
	^.^ Think of it like this:
	^.^
	^.^ within bukkit, there is a Sub-Section, burgerBUR
	^.^ this is a 'clone' of burger.
	^.^
	^.^ Or....
	^.^ Think of it this way....
	^.^ we 'start' with bukkit
	^.^ we define a subclass of burger to be a 'member' of bukkit (called bucketBUR)
	^.^ (just was we can do with a string or an integer)
	^.^ 
	^.^ OWNER        SLAVE/CHILD                PARENT
	^.^                        (below is the op.)          
	^.^ bukkit define burgerBUR zoe_derivedFrom burger
	^.^   ^               ^                        ^
	^.^   ^               ^                        ^---the 'route' / 'parent' of burgerBUR
	^.^   ^               ^
	^.^   ^               ^
	^.^   ^               ^----------------------------the name of the COPY OF burger,
	^.^   ^                                            a MEMBER (slave?) of bukket
	^.^   ^
	^.^   ^
	^.^   ^--------------------------------------------the class (zoe_array) which 'owns' burgerBUR
	^.^                                                A.K.A the class we are 'working on' here. 
	

	^.^ Now, define a part of the sub-object
	^.^ burgerBUR has its OWN components, which can be addressed as:
	^.^ burgerBUR --toBaby--> subburger4
	burgerBUR define subburger4 = "piggie"
	burgerBUR define subburger5 = "niffle"

	pencil "#burger ::"
	pencil "  " burger --toBaby--> subburger1
	pencil "  " burger --toBaby--> subburger2
	pencil "  " burger --toBaby--> subburger3

	pencil " "

	^.^ 
	^.^ 
	^.^ 
	pencil "#bukkit burgerBUR (derived) ::"
	pencil "    " bukkit --toBaby--> burgerBUR --toBaby--> subburger1
	pencil "    " bukkit --toBaby--> burgerBUR --toBaby--> subburger2
	pencil "    " bukkit --toBaby--> burgerBUR --toBaby--> subburger3
	pencil " "
	pencil "    #burgerBUR own! ::"
	pencil "      "                    burgerBUR --toBaby--> subburger4
	pencil "      "                    burgerBUR --toBaby--> subburger5

	pencil bukkit --toBaby--> cheeze
	pencil cheeze --toBaby--> subcheeze

I see !
